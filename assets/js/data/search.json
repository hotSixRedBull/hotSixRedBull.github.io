[ { "title": "Update", "url": "/posts/Javascript/", "categories": "", "tags": "Javascript, Github", "date": "2021-08-16 00:00:00 +0900", "snippet": "updateI admit that i didn’t post after a month of blog creation.I’m planning to build a blog on cloud. Before the launch, let me update what i’m doing these days.I’m reading a modern javascript tutorial site for better understanding of javascript.Also, I finished a book about vim, and Reactjs.I think leaving my understanding to blog might help preserving my memory. So, Although it’s not the first chapter, let me summerize my understainding from now on.9장. 클래스9.1. 클래스와 기본 문법 기본문법 class MyClass { constructor() { ... } method1() { ... } ...} class는 기본적으로 함수이며, new 연산자를 통해 생성 시, 아래 동작을 수행한다. constructor 함수를 실행, 없다면 빈 객체를 생성 클래스 내부 메서드를 prototype에 저장 class 문법은 단순한 syntactic sugar, 편의문법이 아니다. class로 만든 함수엔 특수 내부 프로퍼티인 [[FunctionKind]]:”classConstructor”가 이름표처럼 붙는다. 클래스를 출력하면 class…로 시작하는 표현이 출력된다. 클래스 메서드는 열거할 수 없다. 클래스 메서드의 enumerable 플래그는 false다. 클래스는 항상 엄격 모드로 실행된다. 클래스 표현식 기본 let User = class { sayHi() { alert(&quot;Hello&quot;); }} 기명 클래스 표현식 이름은 내부에서만 사용 가능 let User = class MyClass { ...}alert(MyClass); // ReferenceError: MyClass is not defined, MyClass는 클래스 밖에서 사용할 수 없습니다. 동적으로 생성 function makeClass() { return class { ... };} getter, setter class User { get name() { ... } set name(value) { ... }} 대괄호를 이용하여 계산된 메서드를 만들 수 있다. class User { [&#39;say&#39; + &#39;hi&#39;]() { ... }} new User().sayhi(); 클래스 필드 메서드가 아닌 속성값도 할당 가능. prototype이 아닌 해당 객체에 저장된다. 복잡한 표현식이나 함수 호출 결과도 사용할 수 있다. 9.2 클래스 상속extends extends 키워드를 쓰면, 해당 클래스의 prototype에 prototype이 지정된다. 따라서, prototype의 prototype을 탐색하며 메서드를 가져올 수 있다. extends 뒤에는 표현식이 올 수도 있다.```function f(phrase) {return class { sayHi() { alert(phrase) }}}class User extends f(“Hello”) {}new User().sayHi(); // Hello### 메서드 오버라이딩- `super` 를 사용- super.method(...)는 부모 클래스에 정의된 메서드, method를 호출합니다.- super(...)는 부모 생성자를 호출하는데, 자식 생성자 내부에서만 사용 할 수 있습니다.- 화살표 함수는 super를 지원하지 않습니다.### 생성자 오버라이딩- 생성자를 오버라이딩 할때는 반드시 부모클래스의 생성자를 super()를 먼저 호출해야하며, 그러지 않은 경우, 에러가 발생한다.- 상속받는 자식 클래스의 생성자는 this에 객체를 할당하지 않기 때문. - 상속받는 자식 클래스의 생성자는, `[[ConstructorKind]]:&quot;derived&quot;`라는 값을 가지며 구분되어 처리된다.### 나중에 읽도록 권장되어 뛰어넘은 절### 클래스 필드 오버라이딩: 까다로운 내용### super 키워드와 `[[HomeObject]]`## 9.3 정적 메서드와 정적 프로퍼티### 정적 메서드- `static` 키워드를 통해서 클래스 함수 자체에 메서드를 설정할 수 있다.class User { static staticMethod() { alert(this === User); }}User.staticMethod(); // true### 정적 프로퍼티- chrome에서만 동작할 수도 있는 최신 문법.class Article { static publisher = “Ilya Kantor”;}alert( Article.publisher ); // Ilya Kantor### 정적 프로퍼티와 정적 메서드의 상속- extends를 쓰면, 정적 프로퍼티와 메서드도 상속된다.## 9.4 private, protected 프로퍼티와 메서드### protected- 자바스크립트는 protected를 흉내낸다.- protected 프로퍼티 양 옆엔 `_` 밑줄이 붙는다.(관례적)class CoffeeMachine { _waterAmount = 0;set waterAmount(value) { if (value &amp;lt; 0) throw new Error(“물의 양은 음수가 될 수 없습니다.”); this._waterAmount = value; }get waterAmount() { return this._waterAmount; }constructor(power) { this._power = power; }}// 커피 머신 생성let coffeeMachine = new CoffeeMachine(100);// 물 추가coffeeMachine.waterAmount = -10; // Error: 물의 양은 음수가 될 수 없습니다.### 읽기 전용 프로퍼티- getter만 설정함으로써 읽기 전용 프로퍼티를 만들 수도 있다.### private 프로퍼티- 최신 문법주의, 폴리필 구현이 필요할 수 있음.- private 프로퍼티와 메서드는 #으로 시작합니다. #이 붙으면 클래스 안에서만 접근할 수 있습니다.- private 필드는 `this[name]`으로 접근할 수 없습니다. class CoffeeMachine { #waterLimit = 200;#checkWater(value) { if (value &amp;lt; 0) throw new Error(“물의 양은 음수가 될 수 없습니다.”); if (value &amp;gt; this.#waterLimit) throw new Error(“물이 용량을 초과합니다.”); }}let coffeeMachine = new CoffeeMachine();// 클래스 외부에서 private에 접근할 수 없음coffeeMachine.#checkWater(); // ErrorcoffeeMachine.#waterLimit = 1000; // Error## 9.5 내장 클래스 확장하기- 배열, 맵과 같은 내장 클래스도 확장이 가능하다.// 메서드 하나를 추가합니다(더 많이 추가하는 것도 가능).class PowerArray extends Array { isEmpty() { return this.length === 0; }}let arr = new PowerArray(1, 2, 5, 10, 50);alert(arr.isEmpty()); // falselet filteredArr = arr.filter(item =&amp;gt; item &amp;gt;= 10);alert(filteredArr); // 10, 50alert(filteredArr.isEmpty()); // false### 내장 객체와 정적 메서드 상속- 내장 객체는 Object.keys, Array.isArray 등의 자체 정적 메서드를 갖습니다.- 내장 클래스는 정적 메서드를 상속받지 못한다. - prototype끼리는 상속이 되지만, 내장 객체 사이의 상속은 없기 때문.## 9.6 &#39;instanceof&#39;로 클래스 확인하기- `instanceof` 연산자를 사용하면 객체가 특정 클래스에 속하는지 아닌지를 확인할 수 있습니다. instanceof는 상속 관계도 확인해줍니다.### instanceof 연산자obj instanceof Class``` obj가 Class에 속하거나 Class를 상속받는 클래스에 속하면 true가 반환됩니다. 클래스에 정적 메서드 Symbol.hasInstance가 구현되어 있으면, obj instanceof Class문이 실행될 때, Class[Symbol.hasInstance](obj)가 호출됩니다. 호출 결과는 true나 false이어야 합니다. 이런 규칙을 기반으로 instanceof의 동작을 커스터마이징 할 수 있습니다.ㄱ 9.10 믹스인 여러 클래스를 상속받지 못하는 것을 우회하는 방법. Object.assign()을 이용한다." }, { "title": "Sunday!", "url": "/posts/Sunday!/", "categories": "", "tags": "주말, Weekend, 블로그, blog, 집들이, housewarming party", "date": "2019-10-20 00:00:00 +0900", "snippet": "The English part is coming below the Korean part.오늘은 블로그 테마를 바꾸려고 찾아봤다, 흠.. 딱히 마음에 드는게 없었다. 지킬 테마는 업데이트가 잘 안되나봐.집들이 태그가 달린 이유는 어제 학교후배이자 직장동료의 이사를 축하하는 자리를 다녀와서~.~Today i looked for some themes to replace the theme on this blog. Hmm.. There wasn’t a theme that came in my mind. Maybe jekyll doesn’t update themes much.The reason i added housewarming party for one of tags is i went to the party of a colleague who was my university junior, too. ~.~" }, { "title": "Watched web development video", "url": "/posts/Watched-web-development-video/", "categories": "", "tags": "런던, London, 근황, News, 여행, Trip", "date": "2019-10-17 00:00:00 +0900", "snippet": "어제 말했던 5분만에 웹앱 만들기 실습을 들어갔는데.. 무료 html 템플릿을 가져오는 방법에 대한 거였다.Netlify.com이라는 배포 서비스도 포함해서말이지.난 이미 github.io를 통해서 하고 있으니 또 다른 사이트를 만들 필요는 없다고 생각했다.근데, 이 블로그에 사진은 어떻게 올리지..? ㅋㅋㅋ본 영상 링크는 맨 아래에~I watched a video about The practice of making a simple web app in 5 minutes.. It was about brining free HTML templates.The video also had contents about Netlify.com which is a web site deployment service.I already uses github.io so i don’t need another site except this blog.However, How can i upload image on this post? LOL..*My watch listVideo1Video2" }, { "title": "Went to London", "url": "/posts/Went-to-London/", "categories": "", "tags": "런던, London, 근황, News, 여행, Trip", "date": "2019-10-16 00:00:00 +0900", "snippet": "블로그도 진짜 오랜만이네. 일단 테마부터 바꿔야겠다 ㅎㅅㅎ «2019년 10월 3일~13일간 런던 여행을 다녀왔다. 런던은 10일을 봐도 볼 것이 남아있는 매력적인 도시였다.물론 데이터가 안터져서 하스스톤을 못한게 천추의 한이고, 당분간 런던의 삶을 그리지는 않을 것 같다.날씨가 너무 좋았다. 비가 오는 날씨를 좋아해서.. 날씨만큼은 런던같았으면.. 했다.1일 1커밋을 하겠다는 입사동기 형의 열정을 조금 받아서, 이틀만이지만 하나 글을 올리며 1커밋 시작한다.하고 싶은 것 블로그 테마 변경 5분만에 웹앱만들기 실습(영상부터 찾아서 ㅎㅎ)더 많지만 두개정도 잡고 하나씩 해봐야 안질리고, 덜 부담되겠지.요즘 일도 바빠서 틈이 거의없다. 집에도 11시 넘어 도착하고, 그래도 슬슬 다시 시동을 걸어보려고 한다. 예전 글 제목도 틀려서 수정해야겠어ㅠㅠ inhancement가 뭐야It’s been a long time to see this blog. I want to change the theme of this blog first. LOLI’ve been to London from 3rd to 13th October 2019. London was a city with various charisma that 10 days was not enough to feel the whole city.Because I felt so boredom of cannot play hearthstone by lack of network, I won’t miss the times been to London within a short period.The climate was so great because I like rainy weather. I hope the weather in Korea resembles the weather in London.The person who went to London with me decided to make 1 commit a day. With his enthusiasm, I started a commit even though it’s 2 days passed from the day I arrived.To-Do list for my fun Change the theme of this blog The practice of making a simple web app in 5 minutes (with a youtube video that I didn’t find yet LOL)Although I have tons of funny things in my mind, Too many To-do lists will make me feel some pressure.These days are so busy that I arrived at home over 11 p.m. I’ll start my funny things and improvements on the programming skill, though. I just found that I misspelled the title of the last post. inhancement? really..?" }, { "title": "bash shell scripting", "url": "/posts/bash-shell-scripting/", "categories": "", "tags": "코딩, coding, shell programming, work, bash, git, shortlog", "date": "2018-12-04 00:00:00 +0900", "snippet": "오늘 CODEOWNERS에서 아직 gitlab으로 이동하지 않은 캡슐들에 대해 이전통보를 보조하는 임무를 맡았다.각 폴더별로 담당자를 찾아서 알려드려야 했는 데, github에서 history 버튼 누르고 일일이 확인하자니..눈도 아프고.ㅠㅠ… 누가 중복이었는지도 모르겠고.. github 이름만 알려드리면 되는건지?누가 담당자인지 그리고 어떻게 연락해야하는지가 오리무중이었다.그 때 사수 Aaron님께서 script 짜는 것을 추천해주셨다. :)근데 아는 게 없어서 업혀가며 배우게 된 bash script!//주석은 어떻게 할까.. 아직 모르겠네VAR=`pwd` //변수는 타입없이 선언echo $VAR //호출시 변수는 $를 앞에 붙이고, 왠만한 명령어는 그냥 치면 된다.while read LINE do...echo $LINE &amp;gt; result.txtdone &amp;lt; $1 //이렇게 $1 등의 숫자표현은 이 파일을 호출할때 주는 인자다.음 코드가 모두 기억나지는 않지만 이런식으로 파일을 한줄 읽어서 표시하기로 했고git shortlog 명령어도 배웠다.git 책에서 보던 pretty 함수를 쓸랬는데 shortlog는 커밋 개수로 나오고,무엇보다 중복되는 계정이 안나온다. (log는 commit별로 나오기때문에..)그리고 sort -u, xargs 도 배웠다.sort -u: 끝에 파이프라인 후 사용하면 결과를 정리해준다.xargs : 파이프라인 후 사용하면 결과를 다른 명령의 입력으로 사용할 수 있다.오늘도 알차게 배우고 일해서 너무 즐거운 것.. :)[en]Today, I got a mission about supporting an moving announcement to the capsules(in bixby2.0) which are not moved to gitLab yet.To do that, I need to find who are contributing to each folders.I was finding the people with using history button in Github.But it was so inefficient.My senior Aaron told me to script this work.I haven’t made any shell script files but he show me how to do this and it worked! (most of the code was from him T.T)the code was like..//I don&#39;t know how to comment in script yet.VAR=`pwd` //variables are defined without type casting.echo $VAR //if you wanna use variables, you have to put `$` in front of the name of the variable. //and you can use any of commands in bash. (use exec if you can&#39;t)while read LINE do...echo $LINE &amp;gt; result.txtdone &amp;lt; $1 //these $number expressions are for arguments when i execute this shell script.And i’ve also learned about sort -u, xargs.It was so joyful day that i learned much and worked well." }, { "title": "Blog enhancement", "url": "/posts/Blog-enhancement/", "categories": "", "tags": "jekyll, 지킬, blog, 블로그, coding, 코딩, disqus, tags", "date": "2018-12-04 00:00:00 +0900", "snippet": "오늘 tag랑 댓글기능 추가함.. 하루에 블로그 글 두 개는 너무 힘드니까 한줄만..ㅎ..Today i added comment and tags. It is so exhausted to write two posts in a day.." }, { "title": "회식이끝나고", "url": "/posts/OMG!!/", "categories": "", "tags": "Jekyll, 블로그, Github", "date": "2018-08-29 00:00:00 +0900", "snippet": "Youtube영상을 봤다.이친구 가 설명을 잘하더라 ㅋㅅㅋJekyll을 이용한 블로그 만들기작년부터 시도했는데 잘 될까?" } ]
